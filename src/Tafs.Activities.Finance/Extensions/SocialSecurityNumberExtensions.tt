<#@ template language="C#" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# Dictionary<Type, string> Aliases = new Dictionary<Type, string>()
    {
        { typeof(byte), "byte" },
        { typeof(sbyte), "sbyte" },
        { typeof(short), "short" },
        { typeof(ushort), "ushort" },
        { typeof(int), "int" },
        { typeof(uint), "uint" },
        { typeof(long), "long" },
        { typeof(ulong), "ulong" },
        { typeof(object), "object" }
    };
#>
<# bool first = true; #>
//
//  SocialSecurityNumberExtensions.cs
//
//  Author:
//       Devin Duanne <dduanne@tafs.com>
//
//  Copyright (c) TAFS, LLC.
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU Lesser General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU Lesser General Public License for more details.
//
//  You should have received a copy of the GNU Lesser General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
//

using Tafs.Activities.Finance.Models;

namespace Tafs.Activities.Finance.Extensions
{
    /// <summary>
    /// Provides a set of extensions for <see cref="SocialSecurityNumber"/>.
    /// </summary>
    public static class SocialSecurityNumberExtensions
    {
<# foreach (var kvp in Aliases)
{
    if (first)
    {
        first = false;
    }
    else
    {
        WriteLine(string.Empty);
    }
#>
        /// <summary>
        /// Gets this <see cref="SocialSecurityNumber"/> as an array.
        /// </summary>
        /// <param name="ssn">The social security number to process.</param>
        /// <returns>This <see cref="SocialSecurityNumber"/> as an array.</returns>
        public static <#= kvp.Value #>[] As<#= kvp.Key.Name #>Array(this SocialSecurityNumber ssn)
        {
            static void Subdivide(short value, <#= kvp.Value #>[] number, int count)
            {
                if (value == 0)
                {
                    return;
                }

                for (short x = value; x > 0; x /= 10)
                {
                    number[count--] = (<#= kvp.Value #>)(x % 10);
                }

                return;
            }

            var number = new <#= kvp.Value #>[9];
            Subdivide(ssn.SerialNumber, number, count: 8);
            Subdivide(ssn.GroupNumber, number, count: 4);
            Subdivide(ssn.AreaNumber, number, count: 2);

            return number;
        }
<#
} #>
    }
}
